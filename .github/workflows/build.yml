name: Cross-build ARMv7 & ARM64

on:
  push:
    branches: [main, master]
    tags: [ '*.*.*' ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv7, arm64]
    env:
      CFLAGS: "-g -O2 -static"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install toolchain
        run: |
          sudo apt-get update
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu git sparse
          else
            # armv7 (armhf)
            sudo apt-get install -y gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf git sparse
          fi

      - name: Clone upstream mmc-utils and replace
        run: |
          git clone https://git.kernel.org/pub/scm/utils/mmc/mmc-utils.git mmc-utils-clone
          cp -a mmc-utils/* mmc-utils-clone/

      - name: Set compiler environment variables
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          else
            echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
          fi

      - name: Show toolchain versions
        run: |
          echo "Compiler: $CC"
          $CC --version || true

      - name: Build
        working-directory: mmc-utils-clone
        run: |
          make clean || true
          CC=$CC CFLAGS="$CFLAGS" make

      - name: List build output
        working-directory: mmc-utils-clone
        run: |
          ls -alh

      - name: Package binary
        run: |
          tar -czf mmc-${{ matrix.arch }}.tar.gz -C mmc-utils-clone mmc
          ls -lh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mmc-${{ matrix.arch }}.tar.gz
          path: mmc-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
  
      - name: List downloaded artifacts
        run: ls -1 ./artifacts
  
      - name: Create GitHub Release and upload all artifacts
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: ./artifacts/* 
          draft: false
          prerelease: false
